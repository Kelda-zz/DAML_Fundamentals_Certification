module Main where

import DA.Optional


type OrderProposalId = ContractId OrderProposal
type OrderId = ContractId Order

data OrderInfo = OrderInfo with
  client: Party
  shippingAddress: Text
  product: Text
  orderDate : Date
  shippingDate : Date
    deriving (Eq, Show)


--This template is used to store client order proposal

template OrderProposal
    with
        client                      : Party
        storeAdmin                  : Party
        orderInfo                   : OrderInfo
        state                       : Text
        amountOfProducts            : Int
        note                        : Optional(Text)
        reference                   : Text

    where
        signatory client
        observer storeAdmin
        ensure client /= storeAdmin && (orderInfo.orderDate < orderInfo.shippingDate) && amountOfProducts>0

        key(client, orderInfo)    : (Party, OrderInfo)
        maintainer key._1



    --This choice allows reject the proposal to create an order

        choice RejectOrderProposal: OrderProposalId
            with
                reason: Optional(Text)
            controller storeAdmin
                do
                create this with
                    state = "Declined"
                    note = reason

    -- This choice allows the client to cancel the proposal

        choice Cancel: ()
            controller client
            do
                return ()

   --This choice serves to review order store proposal
       
        choice ReviewOrderProposal:  Optional (OrderId)
            controller storeAdmin 
                do
                    order <- lookupByKey @Order (client, reference)
                    now <- getTime
                    if (isSome order) then 
                        return None
                    else do
                        assertMsg ("client cannot review their own order proposal ")(client /= storeAdmin)
                        let 
                            state = "Approved"
                        order <- create Order with                              
                            createOrder = now
                            ..
                        return (Some order)
                    

-- This template is used to store client order

template Order
    with
        client                      : Party
        storeAdmin                  : Party
        orderInfo                   : OrderInfo
        createOrder                 : Time     
        state                       : Text
        reference                   : Text

    where
        signatory storeAdmin
        observer client, storeAdmin
        ensure client /= storeAdmin

        key(storeAdmin, reference)    : (Party, Text)
        maintainer key._1

    -- This choice serves for the storeAdmin to check the list of orders so he can see their status and progress

        nonconsuming choice CheckOrders: ([Text])
            with
                orders: [(ContractId Order, Order)]
            controller storeAdmin
            do
                if null orders then return["No Orders"]
                else do
                    return $ map (\order -> "Order Reference: " <> order._2.reference <> " | Status: " <> order._2.state ) orders

    -- This choice serves to update the shipping date and change the status to shipped
        
        choice UpdateOrderToShipped: OrderId
            with
                newShippingDate: Date
            controller storeAdmin
            do
                assertMsg ("Order needs to be Approved to change status to shipped ")(state == "Approved")
                assertMsg ("New shipping date cannot be before orderDate")(newShippingDate > orderInfo.orderDate)
                let
                    newOrderInfo = OrderInfo with
                        client = orderInfo.client
                        shippingAddress = orderInfo.shippingAddress
                        product = orderInfo.product
                        orderDate = orderInfo.orderDate
                        shippingDate = newShippingDate
                
                create this with
                    orderInfo = newOrderInfo
                    state = "Shipped"
